// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AuthType {
  PASSWORD
  GOOGLE
}

model User {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique @db.VarChar(50)
  password            String?               @db.VarChar(255)
  name                String                @db.VarChar(100)
  signUpDate          DateTime              @default(now())
  isLock              Boolean               @default(false)
  authType            AuthType              @default(PASSWORD)
  roles               Role[]                @default([USER])
  issuedRefreshTokens IssuedRefreshToken[]  @relation("user_to_issuedRefreshTokens")
  reviews             Review[]              @relation("user_to_reviews")
  reviewLikes         Review[]              @relation("user_likes_on_reviews")
  creationRatings     CreationRating[]      @relation("user_to_creationRatings")
  reviewComments      ReviewComment[]       @relation("user_to_reviewComments")

  @@map("users")
}

model IssuedRefreshToken {
  id            Int     @id @default(autoincrement())
  user          User    @relation("user_to_issuedRefreshTokens", fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  refreshToken  String  @unique

  @@map("issued_refresh_tokens")
}

enum CreationCategory {
  MOVIES
  TV
  BOOKS
  MUSIC
  GAMES
}

model Creation {
  id          Int               @id @default(autoincrement())
  title       String            @db.VarChar(150)
  description String            @db.VarChar(1000)
  imageId     String            @db.VarChar(50)
  imageUrl    String            @db.Text
  category    CreationCategory
  reviews     Review[]          @relation("creation_to_reviews")
  ratings     CreationRating[]  @relation("creation_to_creationRatings")

  @@map("creations")
  @@unique([title, category])
}

model Review {
  id          Int             @id @default(autoincrement())
  user        User            @relation("user_to_reviews", fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  creation    Creation        @relation("creation_to_reviews", fields: [creationId], references: [id])
  creationId  Int
  title       String          @db.VarChar(150)
  body        String          @db.Text
  grade       Int             @db.SmallInt
  createDate  DateTime        @default(now())
  tags        Tag[]           @relation("reviews_to_tags")
  images      ReviewImage[]   @relation("review_to_reviewImages")
  userLikes   User[]          @relation("user_likes_on_reviews")
  comments    ReviewComment[] @relation("review_to_reviewComments")

  @@map("reviews")
}

model Tag {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.VarChar(30)
  reviews Review[]  @relation("reviews_to_tags")

  @@map("tags")
}

model ReviewImage {
  id        Int     @id @default(autoincrement())
  review    Review  @relation("review_to_reviewImages", fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int
  fileId    String  @db.VarChar(50)
  url       String  @db.Text

  @@map("review_images")
}

model CreationRating {
  creation    Creation  @relation("creation_to_creationRatings", fields: [creationId], references: [id])
  creationId  Int
  user        User      @relation("user_to_creationRatings", fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  rating      Int

  @@id([creationId, userId])
  @@map("creation_ratings")
}

model ReviewComment {
  id          Int       @id @default(autoincrement())
  review      Review    @relation("review_to_reviewComments", fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId    Int
  user        User      @relation("user_to_reviewComments", fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comment     String    @db.VarChar(2000)
  createDate  DateTime  @default(now())

  @@map("review_comments")
}
